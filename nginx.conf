# nginx.conf

# load_module /usr/lib/nginx/modules/ndk_http_module.so;
# load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;
# pcre_jit on;

#user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

pcre_jit on;

# 错误日志配置
error_log /usr/local/openresty/nginx/logs/error.log warn;

events {
    worker_connections 1024;  # 每个工作进程最多允许的连接数
}


env SONIQ_BACKEND;

# HTTP 配置块
http {
    
    # 启用访问日志
    access_log /usr/local/openresty/nginx/logs/access.log combined;

    # 默认 MIME 类型
    include       mime.types;
    default_type  application/octet-stream;

    # 启用 gzip 压缩
    gzip on;
    gzip_comp_level 5;
    gzip_types text/plain application/xml text/css application/javascript application/json;
    gzip_vary on;

    # 设置最大上传大小（防止恶意上传过大文件）
    client_max_body_size 10M;  # 限制为 10MB

    # 设置代理超时（如果需要代理）
    proxy_read_timeout 60s;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;

    # 安全设置 - 添加常见安全头
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;  # 强制 HTTPS
    # add_header X-Content-Type-Options "nosniff" always;  # 防止 MIME 类型嗅探
    # add_header X-Frame-Options "SAMEORIGIN" always;  # 防止点击劫持
    # add_header X-XSS-Protection "1; mode=block" always;  # 防止跨站脚本攻击
    # add_header Referrer-Policy "no-referrer-when-downgrade" always;  # 限制 referrer 信息泄露
    # add_header Content-Security-Policy " script-src 'self'; style-src 'self';" always;  # 防止外部恶意资源
    

    # 配置虚拟主机
    server {
        listen 8080;
        server_name localhost;  # 你的域名或 IP 地址

        # Read the soniq_backend address from an environment variable
        set_by_lua $backend_url '
            local backend = os.getenv("SONIQ_BACKEND")
            backend = ngx.re.sub(backend, "/+$", "")
            return backend
        ';
        
        #set_by_lua $backend_url 'return os.getenv("SONIQ_BACKEND")';

        # 根目录和首页
        root /usr/local/openresty/nginx/html;
        index index.html index.htm;



        # 主页面配置
        location / {

            # 将后端地址注入到 HTML 中
            sub_filter_once off;
            sub_filter 'SONIQ_BACKEND_URL_PLACEHOLDER' '${backend_url}';


            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                #
                # Custom headers and headers various browsers *should* be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }

            # proxy_pass ${backend_url};

        }
        
        #route http://frontend/api/* to http://backend/api/* 
        location /api/ {
            proxy_pass '${backend_url}';

        }

        # 错误页面配置
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }
    }
}
